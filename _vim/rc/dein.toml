[[plugins]]
repo = 'Shougo/dein.vim'

# カーソル位置によってft切り替え
# これでtomlファイルをウハウハ編集
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# カーソル位置のコンテキストのft判定
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# comment out
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  nmap <C-I> <Plug>(caw:hatpos:toggle)
  vmap <C-I> <Plug>(caw:hatpos:toggle)
'''

# unite
[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['unite.vim']

# ステータスバー改造{{{
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['ale', 'vim-airline-themes']
hook_add = '''
  let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }

  " パワーラインでかっこよく
  let g:airline_powerline_fonts = 1
  " カラーテーマ指定してかっこよく
  let g:airline_theme = 'badwolf'
  " タブバーをかっこよく
  let g:airline#extensions#tabline#enabled = 1

  " 選択行列の表示をカスタム(デフォルトだと長くて横幅を圧迫するので最小限に)
  let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])

  " gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
  let g:airline#extensions#hunks#enabled = 0

  " Lintツールによるエラー、警告を表示(ALEの拡張)
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#error_symbol = 'E:'
  let g:airline#extensions#ale#warning_symbol = 'W:'
'''
# }}}

# linterツール{{{
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1

  " ファイルを開いたときにlint実行
  let g:ale_lint_on_enter = 1
  " ファイルを保存したときにlint実行
  let g:ale_lint_on_save = 1
  " 編集中のlintはしない
  let g:ale_lint_on_text_changed = 'never'

  " lint結果をロケーションリストとQuickFixには表示しない
  " 出てると結構うざいしQuickFixを書き換えられるのは困る
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  " 有効にするlinter
  let g:ale_linters = {
  \   'cpp': ['gcc'],
  \}

  " ALE用プレフィックス
  nmap [ale] <Nop>
  map <C-k> [ale]
  " エラー行にジャンプ
  nmap <silent> [ale]<C-P> <Plug>(ale_previous)
  nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''
# }}}

# molokai
[[plugins]]
repo = 'tomasr/molokai'

# typescript{{{
[[plugins]]
repo = 'Quramy/tsuquyomi'
hook_add = '''
  augroup typescript_key_mapping
    au!
    autocmd FileType typescript nmap <buffer> <SPACE>c <Plug>(TsuquyomiRenameSymbol)
  augroup END
'''

# + highlight
[[plugins]]
repo = 'leafgarland/typescript-vim'

# }}}

# restart
[[plugins]]
repo = 'tyru/restart.vim'

[[plugins]]
repo = 'vim-scripts/TwitVim'
hook_add = '''
  if has('mac')
    let twitvim_browser_cmd = 'open'
  endif
  " TODO : for windows
  let twitvim_force_ssl = 1
  let twitvim_count = 40

  nnoremap <SPACE>t :PosttoTwitter<CR>
'''

# gitgutter
[[plugins]]
repo = 'airblade/vim-gitgutter'

# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent> <SPACE>n :NERDTree<CR>
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']

[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = ['vimproc.vim']

#neosippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
hook_add = '''
  let g:neosnippet#snippets_directory='~/vimfiles/snippets/'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_or_target)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['vimproc.vim']
hook_add = '''
  " key shortcus
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config = {
    \ '_' : {
        \ 'runner' : 'vimproc',
        \ 'runner/vimproc/updatetime' : 40,
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split' : ':botright 8sp',
    \ }
  \}
  let g:quickrun_config.cpp = {
    \   'command': 'g++',
    " \   'cmdopt': '-std=c++14 -Wall -Wextra < in.txt'
    \ }
'''

# neocomplete {{{
[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
  " setup {{{
	let g:acp_enableAtStartup = 0
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
	    \ 'default' : '',
	    \ 'vimshell' : $HOME.'/.vimshell_hist',
	    \ 'scheme' : $HOME.'/.gosh_completions'
	    \ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
	    let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
	  " For no inserting <CR> key.
	  "return pumvisible() ? "\<C-y>" : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <silent><expr> <TAB>
	      \ pumvisible() ? "\<C-n>" :
	      \ <SID>check_back_space() ? "\<TAB>" :
	      \ neocomplete#start_manual_complete()
	function! s:check_back_space() abort "{{{
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~ '\s'
	endfunction"}}}
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior (not recommended.)
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" :
	" \ neocomplete#start_manual_complete()

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	  let g:neocomplete#sources#omni#input_patterns = {}
	endif
	if !exists('g:neocomplete#force_omni_input_patterns')
	  let g:neocomplete#force_omni_input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php =
	"\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
	"let g:neocomplete#sources#omni#input_patterns.c =
	"\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
	"let g:neocomplete#sources#omni#input_patterns.cpp =
	"\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl =
	\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

	" For smart TAB completion.
	"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
	"        \ <SID>check_back_space() ? "\<TAB>" :
	"        \ neocomplete#start_manual_complete()
	"  function! s:check_back_space() "{{{
	"    let col = col('.') - 1
	"    return !col || getline('.')[col - 1]  =~ '\s'
	"  endfunction"}}}
  
  "  --- }}}

  " cpp {{{
  if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.cpp =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
  " }}}
'''
# }}}

# Haskell{{{

[[plugins]]
repo = 'dag/vim2hs'

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
hook_add = '''
  augroup ghcmodcheck
    " autocmd! BufWritePost <buffer> GhcModCheckAsync
    " Todo :
  augroup END
'''

# }}}

# C++{{{
[[plugins]]
repo = 'vim-jp/cpp-vim'

[[plugins]]
repo = 'osyo-manga/vim-snowdrop'
depends = ['neocomplete.vim']

# }}}

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_add = '''
  let g:vimproc#download_windows_dll = 1
'''

