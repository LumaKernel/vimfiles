snippet     bipartiteMatching
alias       flowBipariteMatching
options     head
  /// --- Bipartite Matching Library {{{ ///
  
  // O(|V|^2)
  struct BipartiteMatching {
    VVI g; // bipartite directed graph
    VI match;
    VI used;
    BipartiteMatching(int size) size(size), g(size) {}
  
    void addEdge(int a, int b) {
      g[a].PB(b);
      g[b].PB(a);
    }
  
    bool dfs(int u) {
      if(used[u]) return 0;
      used[u] = 1;
      for(int v : g[u]) if(match[v]<0 || flow(match[v])) {
        match[v] = u;
        match[u] = v;
        return 1;
      }
      return 0;
    }
  
    int solve() {
      int res = 0;
      match = VI(size, -1);
      used = VI(size);
      REP(i, size) {
        if(match[i] < 0) {
          fill(ALL(used), 0);
          if(dfs(i)) res++;
        }
      }
      return res;
    }
  };
  
  /// }}}--- ///
  
  BipartiteMatching flow(N);

