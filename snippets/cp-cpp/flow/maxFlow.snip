snippet     maxFlow
abbr        struct MaxFlow<T>
options     head
  /// --- Max Flow with FordFulkerson Library {{{ ///
  
  // Ford-Fulkerson
  // O(FV)
  template<typename T>
  struct MaxFlow {
    struct Edge{
      int to; T cap; int rev;
      Edge(int to, T cap, int rev): to(to), cap(cap), rev(rev) {}
    };
    int n;
    vector<vector<Edge> > g; // direcrted
    ll inf;
    MaxFlow(int n, ll inf): n(n), g(n), inf(inf) {}
    void addEdge(int from, int to, T cap) {
      // cap >= 0
      g[from].emplace_back(to, cap, g[to].size());
      g[to].emplace_back(from, 0, g[from].size()-1);
    }
    ll solve(int s, int t) {
      ll flow = 0;
      while(1) {
        VI used(n, 0);
        ll x = dfs(used, s, t, inf);
        if(x == 0) break;
        flow += x;
        if(flow >= inf) return inf;
      }
      return flow;
    }
    private:
    T dfs(VI &used, int v, int t, T m) {
      if(v == t) return m;
      used[v] = 1;
      for(Edge &edge : g[v]) if(!used[edge.to] && edge.cap > 0) {
        ll d = dfs(used, edge.to, t, min(m, edge.cap));
        if(d == 0) continue; ////
        edge.cap -= d;
        g[edge.to][edge.rev].cap += d;
        return d;
      }
      return 0;
    }
  };
  
  /// ---}}} ///
  
  MaxFlow<ll> flow(N, INF);

