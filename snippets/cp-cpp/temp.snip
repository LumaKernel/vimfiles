snippet     temp
options     head
  #include<bits/stdc++.h>
  using namespace std;
  using ll = long long;
  
  int main() {
    std::ios::sync_with_stdio(false), std::cin.tie(0);
    return 0;
  }

snippet     temptree
options     head
  #include<bits/stdc++.h>
  using namespace std;
  using ll = long long;
  
  const int N = 1e5${0}
  std::vector<int> g[N];
  int n;
  int main() {
    std::ios::sync_with_stdio(false), std::cin.tie(0);
    cin >> n;
    for(int i = 0; i < n - 1; i++) {
      int a, b; cin >> a >> b;
      a--; b--;
      g[a].emplace_back(b);
      g[b].emplace_back(a);
    }
    return 0;
  }

snippet     tempgraph
options     head
  #include<bits/stdc++.h>
  using namespace std;
  using ll = long long;
  
  const int N = 1e5${0}
  std::vector<int> g[N];
  int n, m;
  int main() {
    std::ios::sync_with_stdio(false), std::cin.tie(0);
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
      int a, b; cin >> a >> b;
      a--; b--;
      g[a].emplace_back(b);
      g[b].emplace_back(a);
    }
    return 0;
  }

snippet     all_subtree_dp
alias       dp_all_subtree temp_all_subtree_dp temp_dp_all_subtree
options     head
  #include<bits/stdc++.h>
  using namespace std;
  using ll = long long;
  
  const int N = 1e5;
  vector<vector<int>> g(N);
  using Value = int;
  map<int, Value> dp[N];
  int n;
  Value dfs(int i, int p, int f = 0) {
    if(dp[i].count(p)) return dp[i][p];
    int cnt = 0;
    Value res = 0;
    if(f || p == -1) {
      // O(deg(i))
      // go only child
      for(int j : g[i]) if(j != p) {
        cnt++;
        res += dfs(j, i, f);
      }
    } else {
      // O(1)
      cnt = g[i].size() - 1;
    }
    return dp[i][p] = res;
  }
  int main() {
    std::ios::sync_with_stdio(false), std::cin.tie(0);
    cin >> n;
    for(int i = 0; i < n - 1; i++) {
      int a, b; cin >> a >> b; a--; b--;
      g[a].emplace_back(b);
      g[b].emplace_back(a);
    }
    dfs(0, -1, 1);
    for(int i = 0; i < n; i++) dfs(i, -1);
    return 0;
  }
  
