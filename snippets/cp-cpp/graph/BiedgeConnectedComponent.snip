# verify : https://beta.atcoder.jp/contests/arc039/submissions/2136670
snippet     biedge
alias       bridge twoedge
abbr        Biedge(Lowlink);
options     head
  // !! require Lowlink !!
  /// --- Biedge Component Decomposition Libary {{{ ///
  
  // undirected graph
  struct Biedge {
    Lowlink lowlink;
    vector<int> comp;
  
    Biedge(Lowlink lowlink): lowlink(lowlink){
      decomposite();
    }
  
    vector< vector<int> > tree;
    vector<int> used;
  
    private:
    void decomposite() {
      int size = lowlink.size;
  
      tree.resize(size);
  
      used.assign(size, 0);
      comp.assign(size, -1);
  
      int gid = 0;
      for(int i = 0; i < size; i++) if(!used[i]) dfs(i, gid++);
  
      tree.resize(gid);
    }
  
    void dfs(int i, int gid) {
      used[i] = 1;
      comp[i] = gid;
      for(auto edge : lowlink.g[i]) {
        int j = edge.to;
        int idx = edge.idx;
        if(lowlink.isBridge[idx]) {
          if(used[j]) {
            tree[gid].PB(comp[j]);
            tree[comp[j]].PB(gid);
          }
        }else if(!used[j]){
          dfs(j, gid);
        }
      }
    }
  };
  
  /// }}}--- ///

