include cp-cpp/temp.snip

snippet     p
options     word
  cout << ${0:TARGET} << endl;

snippet     emp
options     word
  emplace_back

snippet     pb
options     word
  push_back

snippet     s
options     word
  std::

snippet     all
options     word
  begin(${1}), end($1)

snippet     input
alias       iterator
options     word
  template<class InputIter, class = typename iterator_traits<InputIter>::value_type>

snippet     lib
options     head
  // @import header
  #include <bits/stdc++.h>
  using namespace std;
  using ll = long long;
  
  // @@
  // @ ${1}
  // @snippet ${2}
  ${0}

snippet     random
options     head
  random_device rnd;
  mt19937 mt(rnd());
  uniform_int_distribution<ull> rd(0, ull(-1));

snippet     smin
alias       smax
options     head
  template<class T, class U> inline void smin(T &a, const U &b) { a = a < (T) b ? a : b; }
  template<class T, class U> inline void smax(T &a, const U &b) { a = a < (T) b ? b : a; }

snippet     uniq
alias       compress
options     head
  #define uniq(v) (sort(begin(v), end(v)), (v).erase(unique(begin(v), end(v)), end(v)))
  #define compress(mp, b) map<decltype(b[0]), int> mp; { int i = 0; for(auto &e : b) mp[e] = i++; }

